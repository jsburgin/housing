$(function() {

	// make the user confirm user deletion
	$('.remove-user-form').submit(function(event) {
		var submit = confirm('Are you sure you want to delete the user?');

		if (submit) {
			$('.remove-user-form').sumbit();
		}

		event.preventDefault();
	});

});

function HousingManager(settings) {
	var pageType;
	var socket = io();

	if (settings.page) {
		pageType = settings.page;
	}

	// call necessary method based on page & enable socket.io connections
	switch(pageType) {
		case 'Notifications':
			socket.emit('notificationEngine', true);
			break;
		case 'Calendar':
			socket.emit('calendarEngine', true);
			calendarManager();
			break;
		case 'NotificationCreation':
            socket.emit('notificationCreation', true);
			notificationCreator();
			break;
		case 'Users':
			loadDataTables('.user-accounts');
			break;
		case 'eventCreation':
			socket.emit('eventCreation', true);
			
			socket.on('eventPackage', function(eventPackage) {
				eventCreation(eventPackage.positions, eventPackage.buildings, eventPackage.groups);
			});

			break;
	}

	// socket.io events //

	socket.on('notificationGraphData', function(data) {
		var chart = c3.generate({
			bindto: '#notification-chart',
			data: {
				x: 'x',
				columns: [
					data.x,
					data.y
				]
			},
			axis: {
				x: {
					type: 'timeseries',
					tick: {
						format: '%m/%d/%Y'
					}
				}
			},
			tooltip: {
				show: true
			},
			color: {
				pattern: ['#AB2D4E']
			},
		});

		$('#notification-chart').prepend('<h3>Notification Frequency</h3>');
	});

	// calendar events

	function calendarManager() {
		$('#calendar').fullCalendar({
			defaultDate: new Date().toString(),
			editable: false,
			eventLimit: true,
			fixedWeekCount: false,
			aspectRatio: 1.7
		});

		$('.fc-day').click(function(event) {
			var dateSelected = $(event.target).attr('data-date');
			dayClicked(dateSelected);
		});

		$('.fc-day-number').click(function(event) {
			var dateSelected = $(event.target).attr('data-date');
			dayClicked(dateSelected);
		});

		function dayClicked(date) {
			// filter dayClicked data
		}
	}

	function notificationCreator() {
		$('.notification-form').submit(function(e) {
			e.preventDefault();
			e.returnValue = false;

			var notification = {};

			notification.subject = $('.notification-subject').val();
			notification.message = $('.notification-message').val();

            notification.toEmail = $('.email-checkbox').prop('checked');
            console.log(notification.toEmail);
			notification.positions = [];
			notification.buildings = [];

			$('.position-checkbox').each(function(index, item) {
				if (item.checked) {
					var itemValue;
					notification.positions.push($(item).val());
				}
			});

			$('.building-checkbox').each(function(index, item) {
				if (item.checked) {
					notification.buildings.push($(item).val());
				}
			});

            socket.emit('notification', notification);
            window.location.replace('/notifications');
		});
	}

	function loadDataTables(tableContainer) {
		$(tableContainer).DataTable();
	}

	function eventCreation(positions, buildings, groups) {
		// clear 'None' option automatically generated by server
		groups.shift();
		console.log(buildings);

		var instances = [];
		var instanceCount = 1;

		function generateSelector(selectorType) {
			var selector = '';
			selector += '<div class="event-checkbox-collection ' + selectorType + '-selection">';

			var tempCollectionList;
			switch(selectorType) {
				case 'position':
					tempCollectionList = positions;
					break;
				case 'building':
					tempCollectionList = buildings;
					break;
				case 'group':
					tempCollectionList = groups;
					break;
				default:
					return '';			
			}

			for (var i = 0; i < tempCollectionList.length; i++) {
				selector += '<div class="checkbox-selection">';
				selector += '<input type="checkbox" class="' + selectorType + '-checkbox" value="' + tempCollectionList[i].id + '" />';
				selector += '<label>' + tempCollectionList[i].name + '</label>';
				selector += '</div>';
			}
			selector += '</div>';
			return selector; 	
		}

		function addInstanceBlock(dataType) {
			$('.instance-block').append('<div class="filter-instance ' + dataType + '-instance instance-' + instanceCount + '" instance-id="' + instanceCount + '"">');
			$('.instance-' + instanceCount).append('<h6>Positions</h6>');
			$('.instance-' + instanceCount).append(generateSelector('position'));
			if (dataType == 'building') {
				$('.instance-' + instanceCount).append('<h6>Buildings</h6>');
				$('.instance-' + instanceCount).append(generateSelector('building'));	
			} else {
				$('.instance-' + instanceCount).append('<h6>Groups</h6>');
				$('.instance-' + instanceCount).append(generateSelector('group'));
			}
			$('.instance-' + instanceCount).append('<label>Location:</label><input type="text" name="location", class="event-location-input">');
			$('.instance-' + instanceCount).append('<label>Start Time:</label><input type="time" name="starttime", class="start-time">');
			$('.instance-' + instanceCount).append('<label>End Time:</label><input type="time" name="endtime", class="end-time">');

			++instanceCount;	
		}

		$('.event-creation-form .add-building-instance').click(function() {
			// add instance for building based identifcation
			addInstanceBlock('building');
		});

		$('.event-creation-form .add-group-instance').click(function() {
			// add instance for group based indentification
			addInstanceBlock('group');
		});

		$('.event-creation-form').submit(function(event) {
			generateEvent(function(eventData) {
				console.log(eventData);
				socket.emit('newEvent', eventData);
				// redirect here
			});
			event.preventDefault();
		});

		function generateEvent(next) {
			var eventData = {
				title: $('.event-name-input').val(),
				description: $('.event-description-input').val(),
				date: $('.event-date-input').val(),
				instances: []
			};

			$.each($('.filter-instance'), function(index, filter) {
				var newInstance = {
					startTime: $(filter).find('.start-time').val(),
					endTime: $(filter).find('.end-time').val(),
					location: $(filter).find('.event-location-input').val(),
					positions: [],
					buildings: [],
					groups: []
				};
				
				$.each($(filter).find('.position-checkbox'), function(index, checkbox) {
					if (checkbox.checked) {
						newInstance.positions.push(parseInt($(checkbox).val()));
					}
				});

				if ($(filter).attr('class').indexOf('building-instance') != -1) {
					newInstance.buildings = [];
					$.each($(filter).find('.building-checkbox'), function(index, checkbox) {
						if (checkbox.checked) {
							newInstance.buildings.push(parseInt($(checkbox).val()));
						}
					});
					
				} else {
					$.each($(filter).find('.group-checkbox'), function(index, checkbox) {
						if (checkbox.checked) {
							newInstance.groups.push(parseInt($(checkbox).val()));
						}
					});
				}
			
				eventData.instances.push(newInstance);
			});


			next(eventData);
		}
	}
}